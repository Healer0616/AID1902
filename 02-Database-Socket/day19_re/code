正则表达式

一.动机
    1.文本处理已经能称为计算机常见工作之一
    2.对文本内容的搜索，定位，提取是逻辑比较复杂的
    3.为了快速方便的解决上述问题，产生了正则表达式

二.简介
    定义：即文本的高级匹配模式，提供搜索，替换等功能。其本质是由一系列字符
         和特殊符号构成的字符串，这个字符串即正则表达式。

    原理：通过特殊符号去描述字符的组成规则，比如重复，位置等，来表达一类字符串，进而匹配。

三.元字符的使用
    1.普通字符
        匹配规则：每个普通字符匹配其对应的字符

        In:re.findall("ab","abcda")
        Out:['ab']
        注意：可以匹配utf-8字符

    2.或
        元字符： |
        匹配规则：匹配 | 两侧任意正则表达式规则

        In [11]: re.findall("ab|cd","abcdefgh")
        Out[11]: ['ab', 'cd']

    3.匹配单个字符
        元字符： .
        匹配规则：匹配除换行外任意一个字符

        In [13]: re.findall("张.丰","张三丰,张四丰,张五丰")
        Out[13]: ["张三丰","张四丰","张五丰"]

    4.匹配字符集
        元字符：[字符集]
        匹配规则：匹配字符集中任意一个字符
        表达形式：[abc#!好] --> 匹配其中任意一个
                 [0-9][a-z][A-Z] 匹配区间中任意一个
                 [_#?0-9a-z] 混合书写，区间写在后边

        In [15]: re.findall("[aeiou]","hello world")
        Out[15]: ['e', 'o', 'o']

    5.匹配字符集取反
        元字符：[^字符集]
        匹配规则：匹配除了字符集以外的任意一个字符

        In [18]: re.findall("[^0-9]","27017 port")
        Out[18]: [' ', 'p', 'o', 'r', 't']

    6.匹配字符串开始位置
        元字符：^
        匹配规则：匹配字符串的开始位置

        >>> re.findall("^Jame","Jame,Hi")
        ['Jame']

    7.匹配字符串结束位置
        元字符：$
        匹配规则：匹配目标字符串的结尾位置

        >>> re.findall("Hi$","Jame,Hi")
        ['Hi']

        使用技巧：^ 和 $表示开头结尾位置，这两个元字符一定是在正则表达式开始和结尾处

    8.匹配字符重复
        元字符：*
        匹配规则：匹配前面的字符出现0次或多次

        >>> re.findall("wo*","wooooo~w!")
        ['wooooo', 'w']

        元字符：+
        匹配规则：匹配前面的字符出现1次或多次

        >>> re.findall("wo+","wooooo~w!")
        ['wooooo']

        元字符：？
        匹配规则：匹配前面的字符出现0次或1次

        >>> re.findall("-?[1-9][0-9]*","age:19,score:-60")
        ['19', '-60']

        元字符：{n}
        匹配规则：匹配前面的字符出现n次

        >>> re.findall("1[0-9]{10}","tel:18857292945")
        ['18857292945]

        元字符：{m,n}
        匹配规则：匹配前面的字符出现m-n次
        >>> re.findall("[1-9][0-9]{5,10}","qq:123456778")
        ['123456778']

    9.匹配任意（非）数字字符
        元字符：\d  \D
        匹配规则: \d 匹配任意数字字符 [0-9]
                 \D 匹配任意非数字字符 [^0-9]

        >>> re.findall("\d{1,5}","mysql:3306,mongo:27017")
        ['3306', '27017']
        >>> re.findall("\D+","mysql:3306,mongo:27017")
        ['mysql:', ',mongo:']

    10.匹配任意（非）普通字符
        元字符： \w  \W
        匹配规则: \w 匹配普通字符
                 \W 匹配非普通字符

        说明：普通字符指：数字，字母，下划线，汉字

        >>> re.findall("\w+","server_addr=('127.0.0.1',8888)")
        ['server_addr', '127', '0', '0', '1', '8888']
        >>> re.findall("\W+","server_addr=('127.0.0.1',8888)")
        ["=('", '.', '.', '.', "',", ')']

    11.匹配任意（非）空字符
        元字符： \s  \S
        匹配规则:\s 匹配任意空字符
                \S 匹配任意非空字符

        说明：空字符指：空格 \r \n \t \v \f

        >>> re.findall("\w+\s+\w+","hello world")
        ['hello world']
        >>> re.findall("\w+\S+\w+","hello    world")
        ['hello', 'world']

    12.匹配字符串开头结尾位置
        元字符：\A  \Z
        匹配规则:\A ==> ^
                \Z ==> $

        >>> re.findall("\A\w+\Z","helloworld")
        ['helloworld']

        使用技巧：如果正则表达式中同时出现^ $，则两者之间的正则表达式需要将目标字符串内容全部匹配

    13.匹配单词（非）边界位置
        元字符：\b  \B
        匹配规则:\b 匹配单词边界
                \B 匹配非单词边界

        说明：单词边界指普通字符（\w代表的字符）与其他字符的交界位置

        >>> re.findall(r"\bis\b","this is a test")
        ['is']
        >>> re.findall(r"\Bis\b","this is a test")
        ['is']

总结：
匹配字符：. [...] [^...] \d  \D  \w  \W  \s  \S
匹配重复： *  +  ?  {n}  {m,n}
匹配位置：^  $  \A  \Z  \B  \b
其他：()  \  |

四.正则表达式的转义

    1.如果使用正则表达式匹配特殊字符，需要加\表示转义

        特殊字符： . * + ? ^ $ [] {} () | \

        >>> re.findall(r"-?\d+\.?\d*","-12,23,2.33,-133")
        ['-12', '23', '2.33', '-133']

    2.raw 字符串的使用

        raw字符串：在字符串前加r，表示该字符串为raw字符串，这样的字符串不会进行字符串转义处理

五.贪婪与非贪婪
    贪婪模式：默认情况下，匹配重复的元字符总是尽可能多的向后匹配更多内容。比如：* + ？{m,n}

    非贪婪模式（懒惰）：让重复元字符尽可能少的匹配内容

    贪婪 --> 非贪婪

        * --> *?
        + --> +?
        ? --> ??
        {m,n} --> {m,n}?

        >>> re.findall(r"\(.+?\)","(李-白),(杜-甫),(白 居 易)")
        ['(李-白)', '(杜-甫)', '(白 居 易)']

六.正则表达式分组
    1.定义：在正则表达式中，以（）建立正则表达式内部分组，子组是正则表达式的一部分，可作为内部整体操作
    2.作用：作为内部整体，改变元字符的操作对象

    >>> re.search(r"(ab)*","abababababab").group()
    'abababababab'

    >>> re.search(r"(王|李)\w{1,3}","王力宏").group()
    '王力宏'

    3.捕获组
        给正则表达式子组起一个名字，表达一定的意义，该组就是捕获组。

            格式：(?P<name>pattern)

            >>> re.search(r"(?P<pig>王|李)\w{1,3}","王力宏").group()
            '王力宏'


    4.注意事项
        * 一个正则表达式中可以有多个分组
        * 子组可以嵌套
        * 子组顺序一般由外到内，由左到右

七.正则表达式匹配原则
    1.正确性，能够正确的匹配出目标字符串
    2.排他性，除了目标字符串外尽可能不匹配其他内容
    3.全面性，尽可能考虑到目标字符串所有情况，不遗漏

八.python的re模块

    regex = re.compile(pattern,flags = 0)
    功能：生成正则表达式对象
    参数：pattern 正则表达式
         flags 功能扩展标志位
    返回值：正则表达式对象

    list = re.findall(pattern,string,flags = 0)
    功能：通过正则匹配目标字符串
    参数：pattern 正则
         string 目标字符串
    返回值：返回匹配到的内容列表，如果正则中有子组，则列表中元素为子组对应内容。

    list = regex.findall(string,pos,endpos)
    功能：通过正则匹配目标字符串
    参数：string 目标字符串
         pos 截取目标字符串开始位置
         endpos 截取目标字符串结束位置
    返回值：返回匹配到的内容列表，如果正则中有子组，则列表中元素为子组对应内容。

    list = regex.split(pattern,string,flags = 0)
    功能：通过正则匹配内容切割字符串
    参数：pattern 正则
         string 目标字符串
    返回值：返回切割后的内容列表。

    s = re.sub(pattern,rel,string,count,falgs = 0)
    功能：使用指定字符串替换匹配到的内容
    参数：pattern 正则
         rel 指定字符串
         string 目标字符串
         count 替换多少处，默认全部替换
    返回值：返回替换后的字符串

    it = re.finditer(pattern,string,flags = 0)
    功能：通过正则匹配目标字符串
    参数：pattern 正则
         string 目标字符串
    返回值：返回匹配内容的迭代对象

    re.fullmatch(pattern,string,flags = 0)
    功能：通过正则匹配目标字符串全部内容
    参数：pattern 正则
         string 目标字符串
    返回值：返回匹配内容的match对象

    re.match(pattern,string,flags = 0)
    功能：通过正则匹配目标字符串起始内容
    参数：pattern 正则
         string 目标字符串
    返回值：返回匹配内容的match对象

    re.search(pattern,string,flags = 0)
    功能：通过正则匹配目标字符串第一处内容
    参数：pattern 正则
         string 目标字符串
    返回值：返回匹配内容的match对象

    regex对象属性：
        * flags：flags标志位值
        * pattern：正则表达式
        * groups：子组数量
        * groupindex：捕获组与组序列号形成的字典

    >>> regex = re.compile(r"(ab)cd(?P<pig>ef)",flags=re.I)
    >>> regex.flags
    34
    >>> regex.pattern
    '(ab)cd(?P<pig>ef)'
    >>> regex.groups
    2
    >>> regex.groupindex
    mappingproxy({'pig': 2})


    match对象属性方法

    1.属性变量
        print(obj.pos)         # 匹配目标字符串开始位置
        print(obj.endpos)      # 匹配目标字符串结束位置
        print(obj.re)          # 正则表达式
        print(obj.string)      # 目标字符串
        print(obj.lastgroup)   # 最后一组的组名
        print(obj.lastindex)   # 最后一组的序号

    2.属性方法
        start()      获取匹配内容的开始位置
        end()        获取匹配内容的结束位置
        span()       获取匹配内容的起止位置
        groupdict()  获取捕获组组名和对应内容的字典
        groups()     获取子组对应内容

        groups()
        功能：获取match对象对应内容
        参数：默认得到全部匹配内容
             组序号或者组名，则得到对应组内容

作业：1.熟练掌握正则表达式元字符
     2.将re模块调用函数使用regex对象操作练习
     3.写一个程序完成如下练习
        【1】文档中所有大写字母开头单词
        【2】找到其中所有数字，整数，小数，正负数，分数，百分数
        【3】将所有日期提取出来，（2019-1-3），变为2019.1.3


*****************************************************************************
一.flags参数使用

    功能：用于丰富正则表达式的匹配
    使用函数：re模块直接调用的函数，如：re.compile(),re.findall(),re.search()...

    常用flags
        A == ASCII  元字符只能匹配ASCII码
        I == IGNORECASE  匹配时忽略字母大小写
        S == DOTALL  使 . 可以匹配换行
        M == MULTLINE  使 ^ $ 可以匹配每一行的开头结尾位置

        同时使用多个flag：flags = re.I | re.A


练习：
    提示：每段第一个单词为端口名称
         每段之间一定有空行

    要求：编写一个程序模块，从命令行输入端口名称
         通过正则正确的返回一个address值，并打印出来


cookie:
    import sys
    sys.argv: 用来从命令行获取参数，形成列表



































