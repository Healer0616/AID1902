1. 后台
    1. 创建后台管理员
        略...
    2. 基本管理
        略...
    3. 高级管理
        1. 声明并注册高级管理类
        略...
        2. 在EntryAdmin中实现的高级管理功能
            1. list_display
            2. list_display_links
            3. list_editable
            4. list_filter
            5. search_field
            6. date_hierarchy
            7. fields
            8. fieldsets

class AuthorManager(admin.ModelAdmin):
    # 1.定义在列表页展示的字段
    list_display = ['id', 'name', 'age', 'email', 'isActive']

    # 2.定义在列表页上能够链接到详情页的字段
    list_display_links = ['id','name','age','email']
    注：list_display_links 中的值必须出现在list_display中

    # 3.定义在列表页就可编辑的字段
    list_editable = ['age']
    注：因为超链接不能编辑，所以字段不能同时出现在list_display_links和list_editable

    # 4.在列表页右侧自定义过滤器
    list_filter = ['isActive']

    # 5.在列表页添加搜索字段
    search_fields = ['name','email']

    # 6.在详情页中
    指定要显示的字段以及顺序
    fields = ['name', 'email', 'age']
    注：只有写到fields中的字段才会被显示，编写的顺序就是显示的顺序

    # 7.对详情页字段分组
    fieldsets = [
        ('基本选项',
         {
             'fields': ('name', 'age'),
             'classes': ('collapes')
         }),
        ('可选选项',
         {
             'fields': ('email', 'isActive'),
             'classes': ('collapes')
         })
    ]
    注：fields和fieldsets有冲突 只能使用一个

    # 8.日期分层器
    date_hierarchy = '日期字段'



2. 关系映射
    1. 一对一映射
        1. 语法
            在关联的两个类中的任何一个类中:
            属性 = models.OneToOneField(Entry)
        2. 示例
            class Author(models.Model):
                xxx xxx

            class Wife(models.Model):
                xxx xxx
                #增加一对一
                author=models.OneToOneField(Author)

            1. 练习:
                1. 创建一个Wife类,属性如下
                    1.name , 2.age
                2. 在Wife类中增加一对一关联关系,引用 Author
                3. 同步回数据库并观察结果
        3. 查询
            在 Wife 中,通过 author 属性找到对应的author对象
            在 Author 中,通过 wife 属性找到对应的wife对象
    2. 一对多映射
        1. 语法
            在"多"实体中,对"一"的实体进行引用
            属性 = models.ForeignKey(Entry)

        2. 示例
            一个出版社允许出版多本图书
            一本图书只能属于一个出版社
            class Publisher(models.Model):
                xxx xxx

            class Book(models.Model):
                xxx xxx
                publisher = models.ForeignKey(Publisher,null=True)

            2. 练习:
                1. 完成Book 和 Publisher 之间的一对多
                2. 查看数据库效果
                3. 登录到后台,查看Book实体
        3. 数据查询
            1. 通过 Book 查询 Publisher
                通过 publisher 属性查询即可
                练习:
                    查询 西游记 对应的出版社信息,打印在终端上
            2. 通过 Publisher 查询 对应的所有的 Books
                Django会在Publisher中增加一个属性来表示对对应的Book们的查询引用
                属性:book_set  (Entry.objects)
    3. 多对多映射
        1. 语法
            在关联的两个类中的任意一个类中,增加:
            属性 = models.ManyToManyField(Entry)
        2. 示例
            一个作者可以出版多本图书
            一本图书可以被多名作者同时编写

            class Author(models.Model):
                xxxx xxxx

            class Book(models.Model):
                xxxx xxxx

                authors = models.ManyToManyField(Author)
        3. 数据查询
            1. 通过 Book 查询对应的所有的 Authors
                可以通过authors表示对应所有Author的查询对象

                book.authors.all() -> 获取 book 对应的所有的author的信息

                book.authors.filter(age__gt=80) -> 获取book对应的作者中年龄大于80岁的作者的信息
            2. 通过 Author 查询对应的所有的Books
                Django会生成一个属性 book_set 用于表示对对应的book的查询对象

                author.book_set.all()
                author.book_set.filter()
3. request - 请求对象
    1. 什么是request
        HttpRequest , 在Django中就是请求对象,默认会被封装到视图处理函数的参数中 - request
    2. request中的成员
        1. request.scheme : 请求协议
        2. request.body : 请求主体(POST,PUT)
        3. request.path : 请求的具体资源路径
        4. request.get_full_path : 请求的完整路径
        5. request.get_host() : 请求的主机
        6. request.method : 请求方式
        7. request.GET : get请求方式中封装的数据
        8. request.POST : post请求方式中封装的数据
        9. request.COOKIES : 请求中的cookies的相关数据
        10. request.META : 请求中的元数据(消息头)
            request.META['HTTP_REFERER'] : 请求源地址
    3. request.method
        使用:判断 request.method 值,分析用户的请求意图
        if request.method == 'GET':
            去往指定的模板进行显示
        else:
            接收请求提交的数据
    4. 获取请求提交的数据
        1. 使用get方式
            1. 语法
                request.GET['参数名']
                request.GET.get('参数名','默认值')
                request.GET.getlist('参数名')
            2. 能够产生get请求方式的场合
                1. 地址栏的请求
                    1. <a href="地址?参数=值&参数=值">
                    2. location.href='地址?参数=值&参数=值'
                2. 表单中的method为get
                    <form method='get'>
                        姓名:<input type="text" name="uname">
                    </form>
                注意:
                    url(r'^01-xxx/(\d{4})/$',request_views),
                    def request_views(request):
                        request.GET['']
        2. 使用post方式
            1. 语法
                request.POST['参数名']
                request.POST.get('参数名','')
                request.POST.getlist('参数名')
            2. CSRF验证
                1. CSRF
                    Cross-Site Request Forgey
                    跨    站点 请求    伪装
                2. 解决方案:
                    1. 取消 csrf 验证(不推荐)
                        删除 settings.py 中 MIDDLEWARE 中的 CsrfViewsMiddleWare 的中间件
                    2. 开放验证
                        在视图处理函数增加 : @csrf_protect
                        @csrf_protect
                        def post_views(request):
                            pass
                    3. 通过验证
                        需要在表单中增加一个标签
                        {% csrf_token %}























