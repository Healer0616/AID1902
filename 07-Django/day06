1. Django中的forms模块
    1. forms模块的作用
        通过 forms 模块,允许将表单与class相结合
        允许通过 class 生成表单
    2. 使用 forms 模块的步骤
        1. 在应用中创建 forms.py
        2. 导入 django 提供的 forms
            from django import forms
        3. 创建class,一个class会生成一个表单
            class ClassName(forms.Form)
        4. 在 class 中创建属性
            一个属性对应到表单中是一个控件
    3. forms.Form 的语法
        属性 = forms.类型(参数)
        1. 类型
            forms.BooleanField() :type='checkbox'
            forms.CharField() : 文本框 <input type="text">
            forms.ChoiceField() : 下拉选项框 <select>
            forms.DateField() : 日期框 <input type="date">
            ... ...
        2. 参数
            1. label
                控件前的文本
            2. widget
                指定小部件
            3. initial
                控件的初始值(主要针对文本框类型)
                value=""

    4. 在模板中解析form对象
        1. 注意
            1. 需要自定义 <form>
            2. 表单中的按钮需要自定义
        2. 解析form对象
            在 视图中创建form对象并发送到模板中解析.
            ex:
                form = RemarkForm()
                return render(request,'xx.html',locals())

            1. 手动解析
                {% for field in form %}
                    field : 表示的是form对象中的每个属性(控件)
                    {{field.label}} : 表示的是label参数值
                    {{field}} : 表示的就是控件
                {% endfor %}
            2. 自动解析
                1. {{form.as_p}}
                    将 form 中的每个属性(控件/文本)都使用p标记包裹起来再显示
                2. {{form.as_ul}}
                    将 form 中的每个属性(控件/文本)都使用li标记包裹起来再显示
                    注意:必须手动提供ol 或 ul 标记
                3. {{form.as_table}}
                    将 form 中的每个属性(控件/文本)都使用tr标记包裹起来再显示
                    注意:必须手动提供table标记

            3. 练习:
                1. 创建一个注册Form类 - RegisterForm
                    uname - 用户名称
                    upwd - 用户密码(文本框)
                    uage - 用户年龄(数字框)
                    uemail - 电子邮箱
                2. 创建 register 路由
                    get 请求 :
                        创建 RegisterForm 对象并发送到 register.html中显示
                    post 请求:
                        接收register.html 中的数据并输出
    5. 通过 forms 模块获取表单数据
        1. 通过 forms.Form 子类的构造器来接收 post 数据
            form = RemarkForm(request.POST)
        2. 必须是 form 通过验证后,才能取值
            form.is_valid()
                返回True:通过验证,可以取值
                返回False:暂未通过验证,则不能取值
        3. 通过 form.cleaned_data 属性接收数据
            form.cleaned_data : dict 类型
    6. forms 模块的高级处理
        允许将Models实体类和Forms模块结合到一起使用
        1. 在 forms.py 中创建class
            继承自forms.ModelForm
        2. 创建内部类Meta,关联Model类
            关联信息的属性如下:
            1. model : 指定要关联的实体类
            2. fields : 指定要从Model中取哪些字段生成控件
                1.取值为 "__all__"
                    取全部的属性生成控件
                2.取值为 列表
                    将允许生成控件的属性名放在列表中
            3. labels : 指定每个属性对应的label值
                取值为字典
                labels = {
                    '属性名':"label值"
                }
    7. 内置小部件 - widget
        1. 什么是小部件
            表示的是生成到网页上的控件以及一些其他的html属性

            message=forms.CharField(widget=forms.Textarea)
            upwd=forms.CharField(widget=forms.PasswordInput)
        2. 常用的小部件类型
            1. TextInput: type='text'
            2. PasswordInput: type='password'
            3. NumberInput: type="number"
            4. EmailInput: type="email"
            5. URLInput: type="url"
            6. HiddenInput: type="hidden"
            7. CheckboxInput: type="checkbox"
            8. CheckboxSelectMultiple: type="checkbox"
            9. RadioSelect : type="radio"
            10. Textarea : '<textarea></textarea>'
            11. Select: '<select>'
            12. SelectMultiple: '<select multiple>'
        3. 小部件的使用
            1. 继承自forms.Form
                1. 基本版
                    1. 语法
                        属性 = forms.CharField() #无预选值使用
                            text,password,email,url,textarea,checkbox
                        属性 = forms.ChoiceField() #有预选值使用
                            checkbox,radio,select

                        属性 = forms.CharField(
                            label='xxx',
                            widget=forms.小部件类型
                        )
                    2. 示例:
                        upwd = forms.CharField(
                            label='用户密码',
                            widget=forms.PasswordInput
                        )

                        message = forms.CharField(
                            label='评论内容',
                            widget=forms.Textarea
                        )
                2. 高级版
                    1. 特征
                        在指定控件类型的基础之上还能指定控件的一些html属性值
                    2. 语法
                        属性 = forms.CharField(
                            label='xxx',
                            widget=forms.小部件类型(
                                attrs={
                                    'html属性名':'值',
                                    'html属性名':'值',
                                }
                            )
                        )
            2. 继承自forms.ModelForm
                语法:
                class ClassName(forms.ModelForm):
                    class Meta:
                        model = xxxx
                        fields = "__all__" / ["",""]
                        labels = {
                            "xxx":"xxx"
                        }
                        #指定小部件
                        widgets = {
                            '属性名1':forms.小部件类型,
                            '属性名2':forms.小部件类型(
                                attrs={
                                    "html属性名":"值"
                                }
                            )
                        }


2. cookies 和 session
    1. cookies
        1. 什么是cookies
            保存在客户端浏览器上的一段存储空间
        2. Django中的cookies
            使用 响应对象 将cookie保存进客户端
            1. 响应对象
                1. HttpResponse()
                    resp = HttpResponse()
                2. render()
                    resp = render(request,'xxx.html',locals())
                3. redirect()
                    resp = redirect('/')
            2. 保存cookie
                响应对象.set_cookie(key,value,expires)
                    key:cookie的名字
                    value:cookie的值
                    expires:保存时长,以s为单位的数字(s不写)
            3. 获取cookie
                request.COOKIES
                    封装了当前站点下所有的cookie - 字典

#### cookies 和 session(会话)
##### cookies
- cookies是保存在客户端浏览器上的存储空间，通常用来记录浏览器端自己的信息
- cookies 在浏览器上是以键值对的形式进行存储的，键和值都是以ASCII字符串的形存储(不能是中文字符串)
- Django中的cookies
    1. 保存cookie
        响应对象.set_cookie(key, value, expires)
            key:cookie的名字
            value:cookie的值
            expires:保存时长,以s为单位的数字(s不写)
    2. 添加和修改cookies
    - 使用 响应对象HttpResponse 等 将cookie保存进客户端
        1. 方法1
            ```py
            resp = HttpResponse()
            resp.set_cookie('cookies名', cookies值, 超期时间)
            ```
        2. 方法二, 使用render对象
            ```py
            resp = render(request,'xxx.html',locals())
            resp.set_cookie('cookies名', cookies值, 超期时间)
            ```
        3. 方法三, 使用redirect对象
            ```py
            resp = redirect('/')
            resp.set_cookie('cookies名', cookies值, 超期时间)
            ```
    3. 获取cookie
        - 通过 request.COOKIES 获取客户端的 COOKIES数据
            ```py
            resp = redirect('/')
            resp.set_cookie('cookies名', cookies值, 超期时间)
            ```
    4. 注:
        - Chrome 浏览器 可能通过开发者工具的 `Application` >> `Storage` >> `Cookies` 查看和操作浏览器端所有的 Cookies 值

##### session
- session是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据
- 每个客户端都可以在服务器端有一个独立的Session

- http协议是无状态的：每次请求都是一次新的请求，不会记得之前通信的状态
- 客户端与服务器端的一次通信，就是一次会话
- 实现状态保持的方式：在客户端或服务器端存储与会话有关的数据
- 存储方式包括cookie、session，会话一般指session对象
- 使用cookie，所有数据存储在客户端，注意不要存储敏感信息
- 推荐使用sesison方式，所有数据存储在服务器端，在客户端cookie中存储session_id
- 状态保持的目的是在一段时间内跟踪请求者的状态，可以实现跨页面访问当前请求者的数据
- 注意：不同的请求者之间不会共享这个数据，与请求者一一对应

- 什么是session
    - session - 会话
    - 在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据
- session的基本操作:
    - Session对于象是一个 QueryDict 字典, 可以用类拟于字典的方式进行操作
    - 保存 session 的值到服务器
        - `request.session[键] = 值`
        - 如: `request.session['KEY'] = VALUE`
    - 获取session的值
        - `VALUE = request.session['KEY']`
        - 或
        - `VALUE = request.session.get('KEY', 缺省值)`

    - 删除session的值
        - `del request.session['KEY']`
    - 在 settings.py 中有关 session 的设置
        1. SESSION_COOKIE_AGE
            作用:指定sessionid在cookies中的保存时长
            SESSION_COOKIE_AGE = 60*30
        2. SESSION_EXPIRE_AT_BROWSER_CLOSE = True
            设置只要浏览器关闭时,session就失效

- 注: 当使用session时需要迁移数据库,否则会出现错误
```sh
$ python3 manage.py makemigrations
$ python3 manager.py migrate
```